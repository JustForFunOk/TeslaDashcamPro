name: Build and Release by Platform

on:
  push:
    tags:
      - 'v*' # 当推送标签（如 v1.0.0）时触发
  workflow_dispatch: # 手动触发

jobs:
  # 针对 Ubuntu 构建
  build-linux:
    name: Build for Linux
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.18.0
          cache: npm

      - name: Install Dependencies
        run: npm install

      - name: Build Linux Package
        run: npm run make

      - name: Debug Output Directory
        run: ls -R out/make

      - name: Upload .deb Package
        uses: actions/upload-artifact@v4
        with:
          name: linux-deb-package
          path: $(find out/make -type f -name "*.deb" | head -n 1)

      - name: Upload .rpm Package
        uses: actions/upload-artifact@v4
        with:
          name: linux-rpm-package
          path: $(find out/make -type f -name "*.rpm" | head -n 1)

  # 针对 Windows 构建
  build-windows:
    name: Build for Windows
    runs-on: windows-2019
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.18.0
          cache: npm

      - name: Install Dependencies
        run: npm install

      - name: Build Windows Package
        run: npm run make

      - name: Debug Output Directory
        run: ls -R out/make

      - name: Upload .exe Package
        uses: actions/upload-artifact@v4
        with:
          name: windows-package
          path: $(Get-ChildItem -Path "out/make" -Recurse -Filter "*.exe" | Select-Object -First 1).FullName

  # 针对 macOS 构建
  build-macos:
    name: Build for macOS
    runs-on: macos-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.18.0
          cache: npm

      - name: Install Dependencies
        run: npm install

      - name: Build macOS Package
        run: npm run make

      - name: Debug Output Directory
        run: ls -R out/make

      - name: Upload .zip Package
        uses: actions/upload-artifact@v4
        with:
          name: macos-package
          path: $(find out/make -type f -name "*.zip" | head -n 1)

  # 发布到 GitHub Release
  release:
    name: Release Artifacts
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download Linux .deb Artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-deb-package
          path: dist/linux

      - name: Download Linux .rpm Artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-rpm-package
          path: dist/linux

      - name: Download Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-package
          path: dist/windows

      - name: Download macOS Artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-package
          path: dist/macos

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux .deb Artifact
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/linux/*.deb
          asset_name: linux-package.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload Linux .rpm Artifact
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/linux/*.rpm
          asset_name: linux-package.rpm
          asset_content_type: application/x-rpm

      - name: Upload Windows Artifact
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/windows/*.exe
          asset_name: windows-package.exe
          asset_content_type: application/octet-stream

      - name: Upload macOS Artifact
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/macos/*.zip
          asset_name: macos-package.zip
          asset_content_type: application/zip
